---------------------------------------For the login process---------------------------------------: 
1- user connect his wallet
	- YES =>
		1- retrieve user account address
		2- Call back-end api end point to make sure if the user is registered and send the account address 
		3- user is registered ?
			- Yes:
				1- Call the api end point /nonce with sending account address
				2- Back-end =>
					- generate nonce (current time)
					- generate temp jwt token that contains claims
						- account address
						- nonce
					- generate a message that contains a  $"Please Sign this message for address {accountAddress}{nonce}";
					- return to the front-end the temp token and the generated message
				3- Front-end => user has to sign the message that is sended back to him
				4- Back-end => calling /verify end point with sending the generated temp token and the signature
					- validate that the temp token is generated using our own secret key
					- decode the jwt (to get the account address and the nonce)
					- Recovering the address from the signed message by providing (original message, user signature)
					- Check that the recovered address from the signature is equal to the account address
						- yes equal => check if user already registered
							- yes user registered => just update the access token
							- no => register the user and generate (access token, refresh token)
						- No its not equal => return error message
			- No: retrieve the message from the api and show it to user
	- NO => Show user need to connect his wallet

---------------------------------------For the register process---------------------------------------:
1- User try to register with his data
2- Form validation passed ?
	- Yes:
		- User sign the transaction to register to contract storage ?
			- Yes :
				- Contract Side => register the user to the contract storage
				- Register is successful ?
					- Yes:
						A- call the api end point /nonce with sending account address
						B- Back-end:
							- generate nonce (current time)
							- generate temp jwt token that contains claims
								- account address
								- nonce
								- generate a message that contains a  $"Please Sign this message for address {accountAddress}{nonce}";
								- return to the front-end the temp token and the generated message
						C- Front-end => user has to sign the message that is sended back to him, signed ?
							- YES:
								- Back-end => calling /verify end point with sending the generated temp token and the signature
									- validate that the temp token is generated using our own secret key
									- decode the jwt (to get the account address and the nonce)
									- Recovering the address from the signed message by providing (original message, user signature)
									- Check that the recovered address from the signature is equal to the account address, equal ?
										- YES :  check if user already registered
											- YES : just update the access token
											- NO : register the user and generate (access token, refresh token)
										- NO =>  Return error message
							- NO => Show error message that user has to sign the message
					- No => Quit and return the error message from the blockchain
			- No => Show error message (You have to sign the transaction to continue)
	- No => Show error message with the required data